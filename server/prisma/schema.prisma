// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id                 Int             @id @default(autoincrement())
  title              String
  description        String
  technical_impact   TechnicalImpact
  operational_impact String
  monitored          Boolean         @default(false)
  start_date         DateTime
  end_date           DateTime?
  status             IncidentStatus
  opened_by          User?           @relation(name: "OpenedIncident", fields: [opened_by_id], references: [id], onDelete: SetNull)
  updated_at         DateTime        @updatedAt
  updated_by         User?           @relation(name: "UpdatedIncidents", fields: [updated_by_id], references: [id], onDelete: SetNull)
  platform           Platform?
  env                Env?
  site               Site?
  reported_by        ReportedBy
  omer_sent          Boolean         @default(false)
  snow_ticket        String?

  opened_by_id   Int?
  IncidentApp    IncidentApp[]
  IncidentImpact IncidentImpact[]
  updated_by_id  Int?
}

model User {
  id              Int           @id
  name            String
  role            UserRole      @default(HAMAL)
  password        String
  incidentsOpened Incident[]    @relation("OpenedIncident")
  incidentUpdated Incident[]    @relation("UpdatedIncidents")
  appsManaged     AppManagers[]
}

model App {
  id                Int              @id @default(autoincrement())
  name              String
  url               String?
  description       String
  operationalImpact String
  branch            String
  section           String
  alternative       String?
  severity          Int
  env               Env
  site              Site
  recovery          Recovery
  platform          Platform
  incidentApps      IncidentApp[]
  impactedApps      IncidentImpact[]
  appManagers       AppManagers[]
  appBCP            AppBCP? // Optional relation to BCP
}

model AppManagers {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  app    App  @relation(fields: [appId], references: [id], onDelete: Cascade)
  userId Int
  appId  Int

  @@id([appId, userId])
}

model AppBCP {
  appId         Int      @id
  bcpDuration   Int
  bcpLatest     DateTime
  bcpComplexity Int
  bcpDependence String?
  bcpOther      String?
  app           App      @relation(fields: [appId], references: [id], onDelete: Cascade)
}

model IncidentApp {
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  app        App      @relation(fields: [appId], references: [id], onDelete: Cascade)
  incidentId Int
  appId      Int

  @@id([appId, incidentId])
}

model IncidentImpact {
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  app        App      @relation(fields: [appId], references: [id], onDelete: Cascade)
  incidentId Int
  appId      Int

  @@id([appId, incidentId])
}

enum TechnicalImpact {
  SHUTDOWN
  PARTIAL_SHUTDOWN
  FEATURE_SHUTDOWN
  BACKUP_NONE
  SLOW
  JITTER
  SLOW_SHUTDOWN
  DATA_TRANSMISSION
  NONE
}

enum IncidentStatus {
  OPENED
  ONGOING
  RESOLVED
  AWAITING_ANSWER
}

enum UserRole {
  COMMANDER
  HAMAL
  KAPAT
}

enum Platform {
  OPENSHIFT
  ORACLE
  MAINFRAME
}

enum Site {
  FIRST
  SECOND
  OTHER
}

enum Env {
  BLACK
  RED
  YELLOW
}

enum ReportedBy {
  CLIENT
  MONITORED
  KAPAT
}

enum Recovery {
  AVAILABLE
  DISABLED
  NONE
}
